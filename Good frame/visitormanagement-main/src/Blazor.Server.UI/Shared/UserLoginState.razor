@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@using CleanArchitecture.Blazor.Infrastructure.Hubs
@inherits OwningComponentBase
@implements IAsyncDisposable
@code{

    [CascadingParameter]
    protected Task<AuthenticationState> authState { get; set; } = default!;

    [Inject]
    private NavigationManager navigationManager { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider authenticationStateProvider { get; set; } = default!;

    private IIdentityService identityService { get; set; }=default!;

    [Inject]
    private HubClient client { get; set; }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

    public async ValueTask DisposeAsync()
    {
        await client.StopAsync();
        client.LoggedOut -= client_LoggedOut;
        client.LoggedIn -= client_LoggedIn;
        authenticationStateProvider.AuthenticationStateChanged -= AuthenticationStateProvider_AuthenticationStateChanged;
        Dispose(true);
        GC.SuppressFinalize(this);
    }


    protected override async Task OnInitializedAsync()
    {
        identityService = ScopedServices.GetRequiredService<IIdentityService>();
        client.LoggedOut += client_LoggedOut;
        client.LoggedIn += client_LoggedIn;
        AuthenticationState state = await authState;
        if (state.User.Identity != null && state.User.Identity.IsAuthenticated)
        {
            await client.StartAsync();
        }

        authenticationStateProvider.AuthenticationStateChanged += AuthenticationStateProvider_AuthenticationStateChanged;
    }

    private void AuthenticationStateProvider_AuthenticationStateChanged(Task<AuthenticationState> authenticationState)
    {
        InvokeAsync(async () =>
        {
            AuthenticationState state = await authenticationState;
            if (state.User.Identity != null && state.User.Identity.IsAuthenticated)
            {
                await client.StartAsync();
            }
        });
    }

    private void client_LoggedIn(object? sender, string e)
    {
        InvokeAsync(async () =>
        {
            string username = await identityService.GetUserNameAsync(e);
            Snackbar.Add($"{username} login.", MudBlazor.Severity.Info);
            await identityService.UpdateLiveStatus(e, true);
        });
    }

    private void client_LoggedOut(object? sender, string e)
    {
        InvokeAsync(async () =>
        {
            string username = await identityService.GetUserNameAsync(e);
            Snackbar.Add($"{username} logout.", MudBlazor.Severity.Normal);
            await identityService.UpdateLiveStatus(e, false);
        });
    }
}


