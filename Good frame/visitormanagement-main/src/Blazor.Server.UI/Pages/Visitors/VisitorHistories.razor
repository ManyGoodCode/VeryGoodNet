@page "/visitor/visitorhistories"


@using CleanArchitecture.Blazor.Application.Features.VisitorHistories.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.VisitorHistories.DTOs
@using CleanArchitecture.Blazor.Application.Features.VisitorHistories.Queries.Pagination
@inject IStringLocalizer<VisitorHistories> L
@attribute [Authorize(Policy = Permissions.VisitorHistories.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 84px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>
        <MudTable ServerData="@(new Func<TableState, Task<TableData<VisitorHistoryDto>>>(ServerReload))"
                  FixedHeader="true"
                  FixedFooter="true"
                  Virtualize="true"
                  Height="calc(100vh - 265px)"
                  Loading="@loading"
                  SortLabel="@L["Sort By"]"
                  MultiSelection="true" @bind-SelectedItems="selectedItems"
                  Hover="true" @ref="table">
            <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">@L["Visitor Histories"]</MudText>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@loading"
                                   OnClick="@(()=>OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">@L["Refresh"]</MudButton>

                        @if (canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@(!(selectedItems.Count>0))"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   OnClick="OnDeleteChecked"
                                   IconColor="Color.Surface">@L["Delete"]</MudButton>
                        }

                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudMenu AnchorOrigin="Origin.BottomLeft" StartIcon="@Icons.Filled.KeyboardCommandKey" EndIcon="@Icons.Filled.KeyboardArrowDown" Label="@L["Action"]" Color="Color.Primary" Variant="Variant.Filled">
                            <MudMenuItem Disabled="@loading" OnClick="@(()=>OnRefresh())">@L["Refresh"]</MudMenuItem>
                        </MudMenu>
                    </MudHidden>
                </div>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@searchString" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <col style="width:50px;" />
                <col style="width:120px;" />
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="Id" T="VisitorHistoryDto">@L["ID"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="VisitorId" T="VisitorHistoryDto">@L["Visitor's Name"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="CheckinPointId" T="VisitorHistoryDto">@L["Check-in Point"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="TransitDateTime" T="VisitorHistoryDto">@L["Check-in Date"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Temperature" T="VisitorHistoryDto">@L["Temperature"]</MudTableSortLabel></MudTh>
                <MudTh>@L["Attachments"]</MudTh>
                <MudTh><MudTableSortLabel SortLabel="Comment" T="VisitorHistoryDto">@L["Comment"]</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd HideSmall="true" DataLabel="@L["ID"]">@context.Id</MudTd>
                <MudTd DataLabel="@L["Visitor's Name"]">
                    <MudText>@context.Visitor</MudText>
                    <MudText Typo="Typo.body2">@context.CompanyName</MudText>
                </MudTd>
                <MudTd DataLabel="@L["Check-in Point"]">
                    @context.CheckinPoint
                </MudTd>

                <MudTd DataLabel="@L["Check-in Date"]">
                    <MudText>@context.TransitDateTime</MudText>
                </MudTd>
                <MudTd DataLabel="@L["Temperature"]">@context.Temperature</MudTd>
                <MudTd DataLabel="@L["Attachments"]">
                    <Blazor.Server.UI.Pages.Visitors.ViewComponent.AttachmentsComponent Attachments="@context.Attachments"></Blazor.Server.UI.Pages.Visitors.ViewComponent.AttachmentsComponent>
                </MudTd>
                <MudTd DataLabel="@L["Comment"]">@context.Comment</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>@L["No matching records found"]</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@L["Loading..."].</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>
@code {
    public string? Title { get; private set; }
    private HashSet<VisitorHistoryDto> selectedItems = new HashSet<VisitorHistoryDto>();
    private MudTable<VisitorHistoryDto> table = default!;
    private int totalItems;
    private string searchString = string.Empty;
    private bool loading;
    private bool uploading;
    private bool downloading;

    [Inject]
    private ISender mediator { get; set; } = default!;

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = default!;

    private VisitorHistoriesWithPaginationQuery query { get; set; } = new();

    private bool canSearch;
    private bool canCreate;
    private bool canDelete;
    protected override async Task OnInitializedAsync()
    {
        Title = L["Visitor Histories"];
        AuthenticationState state = await AuthState;
        canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.VisitorHistories.Search)).Succeeded;
        canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.VisitorHistories.Delete)).Succeeded;
    }

    private async Task<TableData<VisitorHistoryDto>> ServerReload(TableState state)
    {
        try
        {
            loading = true;
            query.Keyword = searchString;
            query.OrderBy = string.IsNullOrEmpty(state.SortLabel) ? "Id" : state.SortLabel;
            query.SortDirection = (state.SortDirection == SortDirection.None ? SortDirection.Descending.ToString() : state.SortDirection.ToString());
            query.PageNumber = state.Page + 1;
            query.PageSize = state.PageSize;
            PaginatedData<VisitorHistoryDto> result = await mediator.Send(query);
            return new TableData<VisitorHistoryDto>()
                {
                    TotalItems = result.TotalItems,
                    Items = result.Items
                };
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OnSearch(string text)
    {
        selectedItems = new HashSet<VisitorHistoryDto>();
        searchString = text;
        await table.ReloadServerData();
    }

    private async Task OnRefresh()
    {
        selectedItems = new HashSet<VisitorHistoryDto>();
        searchString = string.Empty;
        await table.ReloadServerData();
    }

    private async Task OnDeleteChecked()
    {
        LocalizedString deleteContent = L["You're sure you want to delete the selected items:{0}?"];
        DialogParameters parameters = new DialogParameters
        {
                     { nameof(DeleteConfirmation.ContentText), string.Format(deleteContent,selectedItems.Count) }
        };

        DialogOptions options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        IDialogReference dialog = DialogService.Show<DeleteConfirmation>(L["Delete"], parameters, options);
        DialogResult state = await dialog.Result;
        if (!state.Cancelled)
        {
            DeleteVisitorHistoryCommand command = new DeleteVisitorHistoryCommand(selectedItems.Select(x => x.Id).ToArray());
            Result result = await mediator.Send(command);
            await table.ReloadServerData();
            Snackbar.Add($"{L["Deleted successfully"]}", MudBlazor.Severity.Info);
            selectedItems = new HashSet<VisitorHistoryDto>();
        }
    }
}

