@using CleanArchitecture.Blazor.Application.Features.ApprovalHistories.DTOs
@using CleanArchitecture.Blazor.Application.Features.ApprovalHistories.Queries.GetByVisitorId
@using CleanArchitecture.Blazor.Application.Features.Visitors.Commands.Approve
@using CleanArchitecture.Blazor.Application.Features.Visitors.DTOs
@using CleanArchitecture.Blazor.Application.Features.Visitors.Queries.Search

@inject IStringLocalizer<Visitors> L
@inherits MudComponentBase


<MudExpansionPanels Class="mt-4" MultiExpansion="true">
    <MudExpansionPanel Text="@L["Visitor Information"]" @bind-IsExpanded="@expanded">
        <Blazor.Server.UI.Pages.Visitors.ViewComponent.VisitDetailViewComponent Visitor="visitor"></Blazor.Server.UI.Pages.Visitors.ViewComponent.VisitDetailViewComponent>
    </MudExpansionPanel>
    @if (visitor.CompanionCount > 0)
    {
        <MudExpansionPanel Text="@($"{L["Companion Information"]} ({visitor.CompanionCount})")">
            <Blazor.Server.UI.Pages.Visitors.ViewComponent.CompanionTableViewComponent Companion="visitor.Companions"></Blazor.Server.UI.Pages.Visitors.ViewComponent.CompanionTableViewComponent>
        </MudExpansionPanel>
    }
    @if (visitor.ApprovalHistories.Count > 0)
    {
        <MudExpansionPanel Text="@L["Approval Information"]" @bind-IsExpanded="expandedhistory">

            <Blazor.Server.UI.Pages.Visitors.ViewComponent.ActivityTableViewComponent ApprovalHistories="visitor.ApprovalHistories"></Blazor.Server.UI.Pages.Visitors.ViewComponent.ActivityTableViewComponent>

        </MudExpansionPanel>
    }
    </MudExpansionPanels>

    @code {
    private bool expanded = true;
    private bool expandedhistory = true;

    [Parameter]
    public VisitorDto visitor { get; set; } = new VisitorDto();

    private async Task OnShowPreview(CompanionDto item)
    {
        DialogParameters parameters = new DialogParameters
        {
            { nameof(_PreviewDialog.HealthCode),item.HealthCode },
            { nameof(_PreviewDialog.NucleicAcidTestReport),item.NucleicAcidTestReport },
            { nameof(_PreviewDialog.TripCode),item.TripCode },
        };

        DialogOptions options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        IDialogReference dialog = DialogService.Show<_PreviewDialog>(L["Preview attachments"], parameters, options);
        DialogResult state = await dialog.Result;
        if (!state.Cancelled)
        {
        }
    }
}
