@using CleanArchitecture.Blazor.Application.Features.VisitorHistories.DTOs
@using CleanArchitecture.Blazor.Application.Features.VisitorHistories.Queries.GetAll
@using CleanArchitecture.Blazor.Application.Features.Visitors.Commands.Update
@using CleanArchitecture.Blazor.Application.Features.Visitors.Constant
@using CleanArchitecture.Blazor.Application.Features.Visitors.DTOs
@using CleanArchitecture.Blazor.Application.Features.Visitors.Queries.Search
@inject IStringLocalizer<Visitors> L
@inherits MudComponentBase
<div class="d-flex flex-column justify-center align-content-center">
    <MudPaper Class="align-self-center pa-4 mt-4" Elevation="10" Style="width:320px">
        <MudTextField @bind-Value="Keyword" Label="@L["Search my QRcode"]" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="MudBlazor.Color.Primary" OnAdornmentClick="SearchQRcode" />
    </MudPaper>
    <MudCard Class="align-self-center mt-4" Elevation="10" Style="width:320px">
        @if (notfound)
        {
            <MudAlert Severity="MudBlazor.Severity.Error">@L["Not found visitor's information"]</MudAlert>
        }
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@L["Pass Code"]: @visitorDto.PassCode</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardMedia Image="@visitorDto.QrCode" Height="300" />
        <MudCardContent>
            <MudForm>
                <MudTextField For="@(() => visitorDto.Name)" Value="@visitorDto.Name" Label="@L["Visitor's Name"]" ReadOnly="true" />
                <MudTextField For="@(() => visitorDto.CompanyName)" Value="@visitorDto.CompanyName" Label="@L["Company Name"]" ReadOnly="true" />
                <MudTextField For="@(() => visitorDto.LicensePlateNumber)" Value="@visitorDto.LicensePlateNumber" Label="@L["License Plate Number"]" ReadOnly="true" />
                <MudTextField For="@(() => visitorDto.Purpose)" Value="@visitorDto.Purpose" Label="@L["Purpose"]" ReadOnly="true" />
                <MudTextField For="@(() => visitorDto.Employee)" Value="@visitorDto.Employee" Label="@L["Visit Employee"]" ReadOnly="true" />
                <MudTextField For="@(() => visitorDto.ExpectedDate)" Value="@visitorDto.ExpectedDate" Label="@L["Expected Date"]" ReadOnly="true" />
                <MudTimePicker For="@(() => visitorDto.ExpectedTime)" AmPm="true" Time="@visitorDto.ExpectedTime" Label="@L["Expected Time"]" ReadOnly="true" />
                @if (visitorDto.CompanionCount > 0)
                {
                    <MudList Clickable="true" Dense="true">
                        <MudListSubheader Class="px-0">
                            @L["Companion Count"] (@visitorDto.CompanionCount)
                        </MudListSubheader>
                        @foreach (var companion in visitorDto.Companions)
                        {
                            <MudListItem Class="px-0">
                                <MudText>@companion.Name</MudText>
                                <MudText Typo="Typo.body2">@companion.IdentificationNo</MudText>
                            </MudListItem>
                        }

                    </MudList>
                }

                @if (visitorDto.Apppoved == true)
                {
                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CheckCircle" AdornmentColor="Color.Success" Variant="Variant.Outlined" For="@(() => visitorDto.ApprovalOutcome)" Value="@visitorDto.ApprovalOutcome" Label="@L["Approval Outcome"]" ReadOnly="true" />
                }
                else
                {
                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.PauseCircle" AdornmentColor="Color.Default" Variant="Variant.Outlined" For="@(() => visitorDto.ApprovalOutcome)" Value="@visitorDto.ApprovalOutcome" Label="@L["Approval Outcome"]" ReadOnly="true" />
                }
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudText Class="mr-2">@L["Survey feedback"]</MudText>
            <MudRating Disabled="@(visitorDto.Id==0 || visitorDto.Status!=VisitorStatus.PendingFeedback)" SelectedValue="@(visitorDto.SurveyResponseValue??3)" SelectedValueChanged="updatedRatingValue" />
        </MudCardActions>
    </MudCard>

    <Blazor.Server.UI.Pages.Visitors.CheckinComponent.CheckinHistoryComponent VisitorHistories="visitorHistories"></Blazor.Server.UI.Pages.Visitors.CheckinComponent.CheckinHistoryComponent>
</div>
@code {
    private bool notfound { get; set; }
    private int rating { get; set; } = 3;
    private VisitorDto visitorDto = new();
    private List<VisitorHistoryDto> visitorHistories = new List<VisitorHistoryDto>();

    [Parameter]
    public string? Keyword { get; set; }

    [Inject]
    private ISender mediator { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Keyword))
            await SearchQRcode();
    }

    public async Task SearchQRcode()
    {
        VisitorDto visitor = await mediator.Send(new SearchVisitorQuery(Keyword));
        if (visitor is null)
        {
            notfound = true;
            visitorDto = new VisitorDto();
        }
        else
        {
            notfound = false;
            visitorDto = visitor;
            visitorHistories = (await mediator.Send(new GetByVisitorIdVisitorHistoriesQuery(visitorDto.Id))).ToList();
        }
        StateHasChanged();
    }

    private async Task updatedRatingValue(int value)
    {
        visitorDto.SurveyResponseValue = value;
        await mediator.Send(new UpdateVisitorSurveyResponseCommand(visitorDto.Id, value));
        Snackbar.Add($"{L["Thank you for your valuable feedback."]}", MudBlazor.Severity.Success);
    }
}
