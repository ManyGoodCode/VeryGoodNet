@inherits OwningComponentBase
@page "/indentity/roles"
@using Blazor.Server.UI.Components.Dialogs
@using CleanArchitecture.Blazor.Infrastructure.Constants.ClaimTypes
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel
@using System.Reflection
@using System.Security.Claims

@attribute [Authorize(Policy = Permissions.Roles.View)]
@inject IStringLocalizer<Roles> L
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 84px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>

        <MudTable Items="@RoleList"
                  FixedHeader="true"
                  FixedFooter="true"
                  Height="calc(100vh - 265px)"
                  Hover="true"
                  MultiSelection="true"
                  SelectedItems="@SelectItems"
                  SortLabel="@L["Sort By"]"
                  Loading="@loading"
                  Filter="new Func<ApplicationRole,bool>(quickFilter)">
            <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">Roles</MudText>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   OnClick="OnRefresh"
                                   Disabled="@loading"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">@L["Refresh"]</MudButton>
                        @if (canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Size="Size.Small"
                                   OnClick="OnCreate"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@L["Create"]</MudButton>
                        }
                        @if (canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@(!(SelectItems.Count>0))"
                                   OnClick="OnDeleteChecked"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@L["Delete"]</MudButton>
                        }
                        @if (canImport)
                        {
                            <InputFile id="importdataInput" OnChange="OnImportData" hidden accept=".xlsx" />
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Upload"
                                   Size="Size.Small"
                                   for="importdataInput"
                                   HtmlTag="label"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@L["Import Data"]</MudButton>
                        }
                        @if (canExport)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Download"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@L["Export Data"]</MudButton>
                        }
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudMenu AnchorOrigin="Origin.BottomLeft" StartIcon="@Icons.Filled.KeyboardCommandKey" EndIcon="@Icons.Filled.KeyboardArrowDown" Label="@L["Action"]" Color="Color.Primary" Variant="Variant.Filled">
                            <MudMenuItem Disabled="@loading" OnClick="@(()=>OnRefresh())">@L["Refresh"]</MudMenuItem>
                            @if (canCreate)
                            {
                                <MudMenuItem OnClick="OnCreate">@L["Create"]</MudMenuItem>
                            }
                            @if (canDelete)
                            {
                                <MudMenuItem OnClick="OnDeleteChecked">@L["Delete"]</MudMenuItem>
                            }
                            @if (canImport)
                            {
                                <InputFile id="importdataInput" OnChange="OnImportData" hidden accept=".xlsx" />
                                <MudMenuItem for="importdataInput"
                                         HtmlTag="label">@L["Import Data"]</MudMenuItem>
                            }
                            @if (canExport)
                            {
                                <MudMenuItem OnClick="OnExport">@L["Export Data"]</MudMenuItem>
                            }
                        </MudMenu>
                    </MudHidden>
                </div>
                <MudSpacer />
                @if (canSearch)
                {
                    <MudTextField @bind-Value="searchString" Immediate="true" FullWidth="false"
                              Placeholder="@(L["Search for role name"])" Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3">
                    </MudTextField>
                }
            </ToolBarContent>
            <ColGroup>
                <col style="width:50px;" />
                <col style="width:120px;" />

            </ColGroup>
            <HeaderContent>
                <MudTh Style="width:80px">@L["Actions"]</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ApplicationRole, object>(x=>x.Name)">@L["Name"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ApplicationRole, object>(x=>x.Description)">@L["Description"]</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@L["Actions"]">
                    @if (canEdit || canManagePermissions)
                    {
                        <MudMenu Label="@L["Actions"]" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Info" Direction="Direction.Left"
                             OffsetX="true">
                            @if (canEdit)
                            {
                                <MudMenuItem OnClick="@(()=>OnEdit(context))">@L["Edit"]</MudMenuItem>
                            }
                            @if (canManagePermissions)
                            {
                                <MudMenuItem OnClick="@(()=>OnSetPermissions(context))">@L["Set Permissions"]</MudMenuItem>
                            }
                        </MudMenu>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                            @L["No Allowed"]
                        </MudButton>
                    }
                </MudTd>
                <MudTd DataLabel="@L["Name"]">@context.Name</MudTd>
                <MudTd DataLabel="@L["Description"]">@context.Description</MudTd>

            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <_PermissionsDrawer OnAssignAllChanged="OnAssignAllChangedHandler" OnOpenChanged="OnOpenChangedHandler" Open="showPermissionsDrawer" Permissions="permissions" OnAssignChanged="OnAssignChangedHandler"></_PermissionsDrawer>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>

@code {

    private string CurrentRoleName = string.Empty;
    private List<ApplicationRole> RoleList = new List<ApplicationRole>();
    private HashSet<ApplicationRole> SelectItems = new HashSet<ApplicationRole>();
    private string searchString = string.Empty;
    private bool sortNameByLength;
    public string? Title { get; private set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    private RoleManager<ApplicationRole> roleManager { get; set; } = default!;

    private List<PermissionModel> permissions = new();
    private IList<Claim> assignedClaims = default!;
    private bool canCreate;
    private bool canSearch;
    private bool canEdit;
    private bool canDelete;
    private bool canManagePermissions;
    private bool canImport;
    private bool canExport;
    private bool showPermissionsDrawer;
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        roleManager = ScopedServices.GetRequiredService<RoleManager<ApplicationRole>>();
        Title = L["Roles"];
        AuthenticationState state = await AuthState;
        canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Create)).Succeeded;
        canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Search)).Succeeded;
        canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Edit)).Succeeded;
        canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Delete)).Succeeded;
        canManagePermissions = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.ManagePermissions)).Succeeded;
        canImport = false;// (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Import)).Succeeded;
        canExport = false;// (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Export)).Succeeded;
        await LoadData();

    }

    private Func<ApplicationRole, bool> quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(searchString))
               return true;

           if (x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
               return true;
           if (x.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
               return true;

           return false;
       };

    private async Task OnRefresh()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (loading)
            return;
        try
        {
            loading = true;
            RoleList = await roleManager.Roles.ToListAsync();
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OnCreate()
    {
        RoleFormModel model = new RoleFormModel();
        DialogParameters parameters = new DialogParameters { ["model"] = model };
        DialogOptions options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        IDialogReference dialog = DialogService.Show<_RoleFormDialog>(L["Create a new role"], parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled)
        {
            ApplicationRole applicationRole = new ApplicationRole()
                {
                    Name = model.Name,
                    Description = model.Description
                };

            IdentityResult state = await roleManager.CreateAsync(applicationRole);
            if (state.Succeeded)
            {
                RoleList.Add(applicationRole);
                Snackbar.Add($"{L["Create successfully"]}", MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add($"{string.Join(",", (state.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
            }
        }
    }

    private async Task OnEdit(ApplicationRole item)
    {
        string name = item.Name;
        RoleFormModel model = new RoleFormModel()
            {
                Id = item.Id,
                Name = item.Name,
                Description = item.Description
            };

        DialogParameters parameters = new DialogParameters { ["model"] = model };
        DialogOptions options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        IDialogReference dialog = DialogService.Show<_RoleFormDialog>(L["Edit the role"], parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled)
        {
            if (name.ToLower() == "admin" || name.ToLower() == "basic")
            {
                Snackbar.Add($"Can't edit admin role", MudBlazor.Severity.Error);
                return;
            }

            item.Name = model.Name;
            item.Description = model.Description;
            IdentityResult state = await roleManager.UpdateAsync(item);
            if (state.Succeeded)
            {
                Snackbar.Add($"{L["Update successfully"]}", MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add($"{string.Join(",", (state.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
            }
        }
    }
    private async Task OnSetPermissions(ApplicationRole item)
    {
        CurrentRoleName = item.Name;
        permissions = await GetAllPermissions(item);
        showPermissionsDrawer = true;
    }

    private async Task<List<PermissionModel>> GetAllPermissions(ApplicationRole role)
    {
        assignedClaims = await roleManager.GetClaimsAsync(role);
        List<PermissionModel> allPermissions = new List<PermissionModel>();
        Type[] modules = typeof(Permissions).GetNestedTypes();
        foreach (Type module in modules)
        {
            string moduleName = string.Empty;
            string moduleDescription = string.Empty;
            if (module.GetCustomAttributes(typeof(DisplayNameAttribute), true).FirstOrDefault() is DisplayNameAttribute displayNameAttribute)
                moduleName = displayNameAttribute.DisplayName;

            if (module.GetCustomAttributes(typeof(DescriptionAttribute), true).FirstOrDefault() is DescriptionAttribute descriptionAttribute)
                moduleDescription = descriptionAttribute.Description;

            FieldInfo[] fields = module.GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy);
            foreach (FieldInfo fi in fields)
            {
                object propertyValue = fi.GetValue(null);
                if (propertyValue is not null)
                {
                    string claimValue = propertyValue.ToString();
                    allPermissions.Add(new PermissionModel
                        {
                            RoleId = role.Id,
                            ClaimValue = claimValue,
                            ClaimType = ApplicationClaimTypes.Permission,
                            Group = moduleName,
                            Description = moduleDescription,
                            Assigned = assignedClaims.Any(x => x.Value == claimValue)
                        });
                }
            }
        }

        return allPermissions;
    }

    private Task OnOpenChangedHandler(bool state)
    {
        showPermissionsDrawer = state;
        return Task.CompletedTask;
    }

    private async Task OnAssignChangedHandler(PermissionModel model)
    {
        string roleId = model.RoleId;
        ApplicationRole role = await roleManager.FindByIdAsync(roleId);
        model.Assigned = !model.Assigned;
        if (model.Assigned)
        {
            await roleManager.AddClaimAsync(role, new Claim(model.ClaimType, model.ClaimValue));
            Snackbar.Add($"{L["Assigned successfully"]}", MudBlazor.Severity.Info);
        }
        else
        {
            Claim removed = assignedClaims.FirstOrDefault(x => x.Value == model.ClaimValue);
            if (removed is not null)
            {
                await roleManager.RemoveClaimAsync(role, removed);
            }

            Snackbar.Add($"{L["Unassigned successfully"]}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnAssignAllChangedHandler(List<PermissionModel> models)
    {
        string roleId = models.First().RoleId;
        ApplicationRole role = await roleManager.FindByIdAsync(roleId);
        foreach (PermissionModel model in models)
        {
            if (model.Assigned)
            {
                if (model.ClaimType is not null && model.ClaimValue is not null)
                {
                    await roleManager.AddClaimAsync(role, new Claim(model.ClaimType, model.ClaimValue));
                }
            }
            else
            {
                Claim removed = assignedClaims.FirstOrDefault(x => x.Value == model.ClaimValue);
                if (removed is not null)
                {
                    await roleManager.RemoveClaimAsync(role, removed);
                }
            }
        }

        Snackbar.Add($"{L["Assign changed successfully"]}", MudBlazor.Severity.Info);
    }

    private async Task OnDeleteChecked()
    {
        string deleteContent = L["You're sure you want to delete selected items:{0}?"];
        DialogParameters parameters = new DialogParameters
        {
            { nameof(DeleteConfirmation.ContentText), string.Format(deleteContent, SelectItems.Count) }
        };

        DialogOptions options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            DisableBackdropClick = true
        };

        IDialogReference dialog = DialogService.Show<DeleteConfirmation>(L["Delete"], parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled)
        {
            if (SelectItems.Any(x => x.Name.ToLower() == "admin" || x.Name.ToLower() == "basic"))
            {
                Snackbar.Add($"Can't delete admin role", MudBlazor.Severity.Error);
                return;
            }
            foreach (ApplicationRole item in SelectItems)
            {
                await roleManager.DeleteAsync(item);
                RoleList.Remove(item);
            }
        }
    }

    private Task OnExport()
    {
        return Task.CompletedTask;
    }

    private Task OnImportData(InputFileChangeEventArgs e)
    {
        return Task.CompletedTask;
    }
}
