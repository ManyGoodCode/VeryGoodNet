@page "/system/picklist"
@using Blazor.Server.UI.Components.Dialogs
@using CleanArchitecture.Blazor.Application.Features.KeyValues.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.KeyValues.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.KeyValues.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.KeyValues.DTOs
@using CleanArchitecture.Blazor.Application.Features.KeyValues.Queries.ByName
@using CleanArchitecture.Blazor.Application.Features.KeyValues.Queries.Export
@attribute [Authorize(Policy = Permissions.Dictionaries.View)]
@inject IStringLocalizer<Dictionaries> L
@inject IJSRuntime JS
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 84px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>

        <MudTable @ref="table"
                  Items="@KeyValueList"
                  FixedHeader="true"
                  FixedFooter="true"
                  Virtualize="true"
                  RowsPerPage="25"
                  Height="calc(100vh - 265px)"
                  Hover="true"
                  MultiSelection="true"
                  @bind-SelectedItems="selectedItems"
                  @bind-SelectedItem="selectedItem"
                  CommitEditTooltip="@L["Commit Edit"]"
                  RowEditPreview="BackupItem"
                  RowEditCancel="ResetItemToOriginalValues"
                  CanCancelEdit="@canCancelEdit"
                  RowEditCommit="ItemHasBeenCommitted"
                  OnCommitEditClick="@(() => Snackbar.Add(L["Update successfully"], MudBlazor.Severity.Info))"
                  IsEditRowSwitchingBlocked="false"
                  ReadOnly="@_readonly"
                  Loading="@loading"
                  SortLabel="@L["Sort By"]"
                  Filter="new Func<KeyValueDto,bool>(quickFilter)">
            <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">@L["Picklist"]</MudText>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   OnClick="OnRefresh"
                                   Disabled="@loading"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">@L["Refresh"]</MudButton>
                        @if (canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   Disabled="@editing"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Size="Size.Small"
                                   OnClick="OnCreate"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@L["Create"]</MudButton>
                        }
                        @if (canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Secondary"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@(!(selectedItems.Count>0) || editing)"
                                   OnClick="OnDeleteChecked"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@L["Delete"]</MudButton>
                        }
                        @if (canImport)
                        {
                            <InputFile id="importdataInput" OnChange="OnImportData" hidden accept=".xlsx" />
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Upload"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   for="importdataInput"
                                   HtmlTag="label"
                                   IconColor="Color.Surface">@L["Import Data"]</MudButton>
                        }
                        @if (canExport)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Download"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   OnClick="OnExport"
                                   IconColor="Color.Surface">@L["Export Data"]</MudButton>
                        }
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudMenu AnchorOrigin="Origin.BottomLeft" StartIcon="@Icons.Filled.KeyboardCommandKey" EndIcon="@Icons.Filled.KeyboardArrowDown" Label="@L["Action"]" Color="Color.Primary" Variant="Variant.Filled">
                            <MudMenuItem Disabled="@loading" OnClick="@(()=>OnRefresh())">@L["Refresh"]</MudMenuItem>
                            @if (canCreate)
                            {
                                <MudMenuItem Disabled="@editing" OnClick="OnCreate">@L["Create"]</MudMenuItem>
                            }
                            @if (canDelete)
                            {
                                <MudMenuItem Disabled="@(!(selectedItems.Count>0) || editing)" OnClick="OnDeleteChecked">@L["Delete"]</MudMenuItem>
                            }
                            @if (canImport)
                            {
                                <InputFile id="importdataInput" OnChange="OnImportData" hidden accept=".xlsx" />
                                <MudMenuItem for="importdataInput"
                                         HtmlTag="label">@L["Import Data"]</MudMenuItem>
                            }
                            @if (canExport)
                            {
                                <MudMenuItem OnClick="OnExport">@L["Export Data"]</MudMenuItem>
                            }
                        </MudMenu>
                    </MudHidden>
                </div>
                <MudSpacer />
                @if (canSearch)
                {
                    <MudTextField @bind-Value="searchString" Immediate="true" FullWidth="false"
                              Placeholder="@(L["Search for role name"])" Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3">
                    </MudTextField>
                }
            </ToolBarContent>
            <ColGroup>
                <col style="width:50px;" />
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<KeyValueDto, object>(x=>x.Name)">@L["Name"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<KeyValueDto, object>(x=>x.Value)">@L["Value"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<KeyValueDto, object>(x=>x.Text)">@L["Text"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<KeyValueDto, object>(x=>x.Description)">@L["Description"]</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@L["Name"]">@context.Name</MudTd>
                <MudTd DataLabel="@L["Value"]">@context.Value</MudTd>
                <MudTd DataLabel="@L["Text"]">@context.Text</MudTd>
                <MudTd DataLabel="@L["Description"]">@context.Description</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Name">
                    <MudAutocomplete @bind-Value="@context.Name" Clearable="true" CoerceText="true" CoerceValue="true" SearchFunc="searchName" Required />
                </MudTd>
                <MudTd DataLabel="Value">
                    <MudTextField @bind-Value="@context.Value" Required />
                </MudTd>
                <MudTd DataLabel="Text">
                    <MudTextField @bind-Value="@context.Text" Required />
                </MudTd>
                <MudTd DataLabel="Description">
                    <MudTextField @bind-Value="@context.Description" />
                </MudTd>

            </RowEditingTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>

@code {
    private MudTable<KeyValueDto> table = default!;
    public string Title { get; set; } = "Dictionaries";
    private IList<KeyValueDto> KeyValueList = new List<KeyValueDto>();
    private HashSet<KeyValueDto> selectedItems = new HashSet<KeyValueDto>();
    private KeyValueDto? selectedItem { get; set; } = null;
    private KeyValueDto elementBeforeEdit { get; set; } = new();
    private bool canCancelEdit = true;
    private string searchString = string.Empty;
    private bool sortNameByLength;
    private bool editing;

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    [Inject]
    private ISender mediator { get; set; } = default!;
    private bool canCreate;
    private bool canSearch;
    private bool canEdit;
    private bool canDelete;
    private bool canImport;
    private bool canExport;
    private bool _readonly => !canCreate || !canEdit;
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await AuthState;
        canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Dictionaries.Create)).Succeeded;
        canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Dictionaries.Search)).Succeeded;
        canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Dictionaries.Edit)).Succeeded;
        canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Dictionaries.Delete)).Succeeded;
        canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.Dictionaries.Import)).Succeeded;
        canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Dictionaries.Export)).Succeeded;
        await LoadData();
    }

    private bool quickFilter(KeyValueDto dto) => FilterFunc(dto, searchString);

    private bool FilterFunc(KeyValueDto dto, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (dto.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (dto.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{dto.Value} {dto.Text}".Contains(searchString))
            return true;
        return false;
    }

    private Task<IEnumerable<string>> searchName(string value)
    {
        if (string.IsNullOrEmpty(value))
            return Task.FromResult(KeyValueList.Where(x => !string.IsNullOrEmpty(x.Name)).Select(x => x.Name).OrderBy(x => x).Distinct());
        return Task.FromResult(KeyValueList.Where(x => !string.IsNullOrEmpty(x.Name) && x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Select(x => x.Name).OrderBy(x => x).Distinct());
    }

    private async Task LoadData()
    {
        if (loading)
            return;
        try
        {
            loading = true;
            editing = false;
            GetAllKeyValuesQuery cmd = new GetAllKeyValuesQuery();
            KeyValueList = (await mediator.Send(cmd).ConfigureAwait(false)).ToList();
            selectedItems = new HashSet<KeyValueDto>(); ;
            selectedItem = null;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OnRefresh()
    {
        searchString = string.Empty;
        await LoadData();
    }

    private async Task OnDeleteChecked()
    {
        LocalizedString deleteContent = L["You're sure you want to delete the selected items:{0}?"];
        DialogParameters parameters = new DialogParameters
        {
            { nameof(DeleteConfirmation.ContentText), string.Format(deleteContent,selectedItems.Count) }
        };

        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                DisableBackdropClick = true
            };

        IDialogReference dialog = DialogService.Show<DeleteConfirmation>(L["Delete"], parameters, options);
        DialogResult state = await dialog.Result;
        if (!state.Cancelled)
        {
            table.SetEditingItem(null);
            DeleteKeyValueCommand command = new DeleteKeyValueCommand(selectedItems.Select(x => x.Id).ToArray());
            Result result = await mediator.Send(command);
            await LoadData();
            Snackbar.Add($"{L["Deleted successfully"]}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnCreate()
    {
        editing = true;
        table.SetEditingItem(null);
        KeyValueDto newitem = new KeyValueDto()
            {
                Name = selectedItem?.Name,
                Description = selectedItem?.Description,
                TrackingState = TrackingState.Added
            };

        KeyValueList.Insert(0, newitem);
        await Task.Delay(50);
        table.SetSelectedItem(newitem);
        table.SetEditingItem(newitem);
    }

    private void BackupItem(object element)
    {
        InvokeAsync(() =>
        {
            editing = true;
            elementBeforeEdit = new()
                {
                    Id = ((KeyValueDto)element).Id,
                    Name = ((KeyValueDto)element).Name,
                    Text = ((KeyValueDto)element).Text,
                    Value = ((KeyValueDto)element).Value,
                    Description = ((KeyValueDto)element).Description,
                    TrackingState = ((KeyValueDto)element).TrackingState,
                };

            StateHasChanged();
        });
    }

    private void ResetItemToOriginalValues(object element)
    {
        InvokeAsync(() =>
        {
            if (((KeyValueDto)element).TrackingState == TrackingState.Added)
            {
                table.SetEditingItem(null);
                KeyValueList.Remove((KeyValueDto)element);
            }
            else
            {
                ((KeyValueDto)element).Id = elementBeforeEdit.Id;
                ((KeyValueDto)element).Name = elementBeforeEdit.Name;
                ((KeyValueDto)element).Text = elementBeforeEdit.Text;
                ((KeyValueDto)element).Value = elementBeforeEdit.Value;
                ((KeyValueDto)element).Description = elementBeforeEdit.Description;
                ((KeyValueDto)element).TrackingState = elementBeforeEdit.TrackingState;
            }

            editing = false;
            StateHasChanged();
        });
    }

    private void ItemHasBeenCommitted(object element)
    {
        InvokeAsync(async () =>
        {
            AddEditKeyValueCommand command = new AddEditKeyValueCommand()
                {
                    Id = ((KeyValueDto)element).Id,
                    Name = ((KeyValueDto)element).Name,
                    Text = ((KeyValueDto)element).Text,
                    Value = ((KeyValueDto)element).Value,
                    Description = ((KeyValueDto)element).Description,
                };

            Result<int> result = await mediator.Send(command);
            ((KeyValueDto)element).Id = result.Data;
            editing = false;
            StateHasChanged();
        });
    }

    private async Task OnExport()
    {
        ExportKeyValuesQuery request = new ExportKeyValuesQuery()
            {
                Keyword = searchString,
                OrderBy = string.IsNullOrEmpty(table.TableContext.SortFieldLabel) ? "Id" : table.TableContext.SortFieldLabel,
                SortDirection = (table.TableContext.SortDirection == SortDirection.None ? SortDirection.Descending.ToString() : table.TableContext.SortDirection.ToString()),
            };

        byte[] result = await mediator.Send(request);
        using DotNetStreamReference streamRef = new DotNetStreamReference(new MemoryStream(result));
        await JS.InvokeVoidAsync("downloadFileFromStream", $"{L["Dictionaries"]}.xlsx", streamRef);
    }

    private async Task OnImportData(InputFileChangeEventArgs e)
    {
        MemoryStream stream = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(stream);
        ImportKeyValuesCommand command = new ImportKeyValuesCommand(e.File.Name, stream.ToArray());
        Result result = await mediator.Send(command);
        if (result.Succeeded)
        {
            await OnRefresh();
            Snackbar.Add($"Import data successfully", MudBlazor.Severity.Info);
        }
        else
        {
            foreach (string msg in result.Errors)
            {
                Snackbar.Add($"{msg}", MudBlazor.Severity.Error);
            }
        }
    }
}
