@page "/pages/products"

@using CleanArchitecture.Blazor.Application.Features.Products.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.Products.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.Products.DTOs
@using CleanArchitecture.Blazor.Application.Features.Products.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.Products.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.Products.Commands.AddEdit

@inject IJSRuntime JS
@inject IStringLocalizer<Products> L
@attribute [Authorize(Policy = Permissions.Products.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 84px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>
        <AdvancedSearchProductsComponent TRequest="query" OnFilterChanged="OnFilterChanged"></AdvancedSearchProductsComponent>
        <MudTable ServerData="@(new Func<TableState, Task<TableData<ProductDto>>>(ServerReload))"
                  FixedHeader="true"
                  FixedFooter="true"
                  Height="calc(100vh - 265px)"
                  Loading="@loading"
                  SortLabel="@L["Sort By"]"
                  MultiSelection="true" @bind-SelectedItems="selectedItems"
                  Hover="true" @ref="table">
            <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">@L["Product"]</MudText>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@loading"
                                   OnClick="@(()=>OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">@L["Refresh"]</MudButton>
                        @if (canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Size="Size.Small"
                                   OnClick="OnCreate"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@L["Create"]</MudButton>
                        }
                        @if (canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@(!(selectedItems.Count>0))"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   OnClick="OnDeleteChecked"
                                   IconColor="Color.Surface">@L["Delete"]</MudButton>
                        }
                        @if (canImport)
                        {
                            <MudButton Disabled="@uploading" DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Upload"
                                   Size="Size.Small"
                                   Style="margin-right:1px; margin-bottom:4px"
                                   for="importdataInput"
                                   HtmlTag="label"
                                   IconColor="Color.Surface">
                                @if (uploading)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2"> @L["Uploading..."]</MudText>
                                }
                                else
                                {
                                    <MudText>@L["Import Data"]</MudText>
                                }

                            </MudButton>
                            <InputFile id="importdataInput" OnChange="OnImportData" hidden accept=".xlsx" />
                        }
                        @if (canExport)
                        {
                            <MudButton Disabled="@downloading" DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Download"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   OnClick="OnExport"
                                   IconColor="Color.Surface">
                                @if (downloading)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2"> @L["Downloading..."]</MudText>
                                }
                                else
                                {
                                    <MudText>@L["Export Data"]</MudText>
                                }
                            </MudButton>
                        }
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudMenu AnchorOrigin="Origin.BottomLeft" StartIcon="@Icons.Filled.KeyboardCommandKey" EndIcon="@Icons.Filled.KeyboardArrowDown" Label="@L["Action"]" Color="Color.Primary" Variant="Variant.Filled">
                            <MudMenuItem Disabled="@loading" OnClick="@(()=>OnRefresh())">@L["Refresh"]</MudMenuItem>
                            @if (canCreate)
                            {
                                <MudMenuItem OnClick="OnCreate">@L["Create"]</MudMenuItem>
                            }
                            @if (canDelete)
                            {
                                <MudMenuItem OnClick="OnDeleteChecked">@L["Delete"]</MudMenuItem>
                            }
                            @if (canImport)
                            {
                                <InputFile id="importdataInput" OnChange="OnImportData" hidden accept=".xlsx" />
                                <MudMenuItem for="importdataInput"
                                         HtmlTag="label">@L["Import Data"]</MudMenuItem>
                            }
                            @if (canExport)
                            {
                                <MudMenuItem OnClick="OnExport">@L["Export Data"]</MudMenuItem>
                            }
                        </MudMenu>
                    </MudHidden>
                </div>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@searchString" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <col style="width:50px;" />
            </ColGroup>
            <HeaderContent>
                <MudTh Style="width:80px">@L["Actions"]</MudTh>
                <MudTh><MudTableSortLabel SortLabel="Brand" T="ProductDto">@L["Brand Name"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Name" T="ProductDto">@L["Product Name"]</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:right"><MudTableSortLabel SortLabel="Price" T="ProductDto">@L["Price"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Unit" T="ProductDto">@L["Unit"]</MudTableSortLabel></MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@L["Actions"]">
                    @if (canEdit || canDelete)
                    {
                        <MudMenu Label="@L["Actions"]" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Info" Direction="Direction.Left"
                             OffsetX="true">
                            @if (canEdit)
                            {
                                <MudMenuItem OnClick="@(()=>OnEdit(context))">@L["Edit"]</MudMenuItem>
                            }
                            @if (canDelete)
                            {
                                <MudMenuItem OnClick="@(()=>OnDelete(context))">@L["Delete"]</MudMenuItem>
                            }
                        </MudMenu>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                            @L["No Allowed"]
                        </MudButton>
                    }
                </MudTd>
                <MudTd HideSmall="true" DataLabel="@L["Brand Name"]">@context.Brand</MudTd>
                <MudTd DataLabel="@L["Product Name"]">
                    <MudText>@context.Name</MudText>
                    <MudText Typo="Typo.body2">@context.Description</MudText>
                </MudTd>
                <MudTd DataLabel="@L["Price"]" Style="text-align:right">@context.Price.ToString("C2")</MudTd>
                <MudTd DataLabel="@L["Unit"]">@context.Unit</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>@L["No matching records found"]</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@L["Loading.."].</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>
@code {
    public string? Title { get; private set; }
    private HashSet<ProductDto> selectedItems = new HashSet<ProductDto>();
    private MudTable<ProductDto> table = default!;
    private string searchString = string.Empty;
    private bool loading;
    private bool uploading;
    private bool downloading;

    [Inject]
    private ISender mediator { get; set; } = default!;

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = default!;

    private ProductsWithPaginationQuery query { get; set; } = new();

    private bool canSearch;
    private bool canCreate;
    private bool canEdit;
    private bool canDelete;
    private bool canImport;
    private bool canExport;
    protected override async Task OnInitializedAsync()
    {
        Title = L["Products"];
        AuthenticationState state = await AuthState;
        canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Products.Create)).Succeeded;
        canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Products.Search)).Succeeded;
        canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Products.Edit)).Succeeded;
        canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Products.Delete)).Succeeded;
        canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.Products.Import)).Succeeded;
        canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Products.Export)).Succeeded;
    }

    private async Task<TableData<ProductDto>> ServerReload(TableState state)
    {
        try
        {
            loading = true;
            query.Keyword = searchString;
            query.OrderBy = string.IsNullOrEmpty(state.SortLabel) ? "Id" : state.SortLabel;
            query.SortDirection = (state.SortDirection == SortDirection.None ? SortDirection.Descending.ToString() : state.SortDirection.ToString());
            query.PageNumber = state.Page + 1;
            query.PageSize = state.PageSize;
            PaginatedData<ProductDto> result = await mediator.Send(query);
            return new TableData<ProductDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            loading = false;
        }
    }

    private void OnFilterChanged(string s)
    {
        InvokeAsync(async () =>
        {
            await table.ReloadServerData();
        });
    }

    private async Task OnSearch(string text)
    {
        selectedItems = new();
        searchString = text;
        await table.ReloadServerData();
    }

    private async Task OnRefresh()
    {
        selectedItems = new();
        searchString = string.Empty;
        await table.ReloadServerData();
    }

    private async Task OnCreate()
    {
        AddEditProductCommand command = new AddEditProductCommand();
        DialogParameters parameters = new DialogParameters
            {
                   { nameof(_ProductFormDialog.model),command },
            };

        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        IDialogReference dialog = DialogService.Show<_ProductFormDialog>(L["Create a new product"], parameters, options);
        DialogResult state = await dialog.Result;
        if (!state.Cancelled)
        {
            Result<int> result = await mediator.Send(command);
            await table.ReloadServerData();
            Snackbar.Add($"{L["Create successfully"]}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnEdit(ProductDto dto)
    {
        AddEditProductCommand command = new AddEditProductCommand()
            {
                Id = dto.Id,
                Name = dto.Name,
                Brand = dto.Brand,
                Description = dto.Description,
                Pictures = dto.Pictures,
                Unit = dto.Unit,
                Price = dto.Price
            };

        DialogParameters parameters = new DialogParameters
                {
                     { nameof(_ProductFormDialog.model),command },
                };

        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        IDialogReference dialog = DialogService.Show<_ProductFormDialog>(L["Edit the product"], parameters, options);
        DialogResult state = await dialog.Result;
        if (!state.Cancelled)
        {
            Result<int> result = await mediator.Send(command);
            await table.ReloadServerData();
            Snackbar.Add($"{L["Save successfully"]}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnDelete(ProductDto dto)
    {
        LocalizedString deleteContent = L["You're sure you want to delete the product:{0}?"];
        DialogParameters parameters = new DialogParameters
                    {
                         { nameof(DeleteConfirmation.ContentText), string.Format(deleteContent, dto.Name) }
                    };

        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                DisableBackdropClick = true
            };

        IDialogReference dialog = DialogService.Show<DeleteConfirmation>(L["Delete"], parameters, options);
        DialogResult state = await dialog.Result;
        if (!state.Cancelled)
        {
            DeleteProductCommand command = new DeleteProductCommand(new int[] { dto.Id });
            Result result = await mediator.Send(command);
            await table.ReloadServerData();
            Snackbar.Add($"{L["Deleted successfully"]}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnDeleteChecked()
    {
        LocalizedString deleteContent = L["You're sure you want to delete the selected items:{0}?"];
        DialogParameters parameters = new DialogParameters
                        {
                                 { nameof(DeleteConfirmation.ContentText), string.Format(deleteContent,selectedItems.Count) }
                        };

        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                DisableBackdropClick = true
            };

        IDialogReference dialog = DialogService.Show<DeleteConfirmation>(L["Delete"], parameters, options);
        DialogResult state = await dialog.Result;
        if (!state.Cancelled)
        {
            DeleteProductCommand command = new DeleteProductCommand(selectedItems.Select(x => x.Id).ToArray());
            Result result = await mediator.Send(command);
            await table.ReloadServerData();
            Snackbar.Add($"{L["Deleted successfully"]}", MudBlazor.Severity.Info);
            selectedItems = new HashSet<ProductDto>();
        }
    }

    private async Task OnExport()
    {
        downloading = true;
        ExportProductsQuery request = new ExportProductsQuery()
            {
                Keyword = searchString,
                OrderBy = string.IsNullOrEmpty(table.TableContext.SortFieldLabel) ? "Id" : table.TableContext.SortFieldLabel,
                SortDirection = (table.TableContext.SortDirection == SortDirection.None ? SortDirection.Descending.ToString() : table.TableContext.SortDirection.ToString()),
            };

        byte[] result = await mediator.Send(request);
        using DotNetStreamReference streamRef = new DotNetStreamReference(new MemoryStream(result));
        await JS.InvokeVoidAsync("downloadFileFromStream", $"{L["Products"]}.xlsx", streamRef);
        downloading = false;
    }

    private async Task OnImportData(InputFileChangeEventArgs e)
    {
        uploading = true;
        MemoryStream stream = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(stream);
        ImportProductsCommand command = new ImportProductsCommand(e.File.Name, stream.ToArray());
        Result result = await mediator.Send(command);
        if (result.Succeeded)
        {
            await table.ReloadServerData();
            Snackbar.Add($"{L["Import data successfully"]}", MudBlazor.Severity.Info);
        }
        else
        {
            foreach (string msg in result.Errors)
            {
                Snackbar.Add($"{msg}", MudBlazor.Severity.Error);
            }
        }

        uploading = false;
    }
}
