@page "/visitor/messagetemplates"


@using CleanArchitecture.Blazor.Application.Features.MessageTemplates.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.MessageTemplates.DTOs
@using CleanArchitecture.Blazor.Application.Features.MessageTemplates.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.MessageTemplates.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.Visitors.Constant
@using System.Reflection

@inject IJSRuntime JS
@inject IStringLocalizer<MessageTemplates> L
@attribute [Authorize(Policy = Permissions.MessageTemplates.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 84px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>
        <MudTable ServerData="@(new Func<TableState, Task<TableData<MessageTemplateDto>>>(ServerReload))"
                  FixedHeader="true"
                  FixedFooter="true"
                  Height="calc(100vh - 265px)"
                  Loading="@loading"
                  SortLabel="@L["Sort By"]"
                  MultiSelection="true" @bind-SelectedItems="selectedItems"
                  Hover="true" @ref="table">
            <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">@L["Message Templates"]</MudText>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@loading"
                                   OnClick="@(()=>OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">@L["Refresh"]</MudButton>
                        @if (canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Disabled="@loading"
                                   Size="Size.Small"
                                   OnClick="OnCreate"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@L["Create"]</MudButton>
                        }
                        @if (canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@(!(selectedItems.Count>0))"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   OnClick="OnDeleteChecked"
                                   IconColor="Color.Surface">@L["Delete"]</MudButton>
                        }
                        
                        
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudMenu AnchorOrigin="Origin.BottomLeft" StartIcon="@Icons.Filled.KeyboardCommandKey" EndIcon="@Icons.Filled.KeyboardArrowDown" Label="@L["Action"]" Color="Color.Primary" Variant="Variant.Filled">
                            <MudMenuItem Disabled="@loading" OnClick="@(()=>OnRefresh())">@L["Refresh"]</MudMenuItem>
                            @if (canCreate)
                            {
                                <MudMenuItem Disabled="@loading" OnClick="OnCreate">@L["Create"]</MudMenuItem>
                            }
                            @if (canDelete)
                            {
                                <MudMenuItem OnClick="OnDeleteChecked">@L["Delete"]</MudMenuItem>
                            }
                           
                        </MudMenu>
                    </MudHidden>
                </div>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@searchString" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <col style="width:50px;" />
                <col style="width:120px;" />
            </ColGroup>
            <HeaderContent>
                <MudTh Style="width:80px">@L["Actions"]</MudTh>
                <MudTh><MudTableSortLabel SortLabel="SiteId" T="MessageTemplateDto">@L["Site Name"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="ForStatus" T="MessageTemplateDto">@L["For Status"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Subject" T="MessageTemplateDto">@L["Subject / Body"]</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@L["Actions"]">
                    @if (canEdit || canDelete)
                    {
                        <MudMenu Label="@L["Actions"]" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Info" Direction="Direction.Left"
                             OffsetX="true">
                            @if (canEdit)
                            {
                                <MudMenuItem OnClick="@(()=>OnEdit(context))">@L["Edit"]</MudMenuItem>
                            }
                            @if (canDelete)
                            {
                                <MudMenuItem OnClick="@(()=>OnDelete(context))">@L["Delete"]</MudMenuItem>
                            }
                        </MudMenu>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                            @L["No Allowed"]
                        </MudButton>
                    }
                </MudTd>
                <MudTd DataLabel="@L["Site Name"]">
                    <MudText>@context.SiteName</MudText>
                    <MudText Typo="Typo.body2">@context.CompanyName</MudText>
                </MudTd>
                <MudTd DataLabel="@L["For Status / Description"]">
                    <MudText>@context.ForStatus</MudText>
                    <MudText Typo="Typo.body2">@context.Description</MudText>
                </MudTd>                
                <MudTd DataLabel="@L["Subject / Body"]">
                  <MudText>@context.Subject</MudText>
                  <MudText Typo="Typo.body2">@context.Body</MudText>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>@L["No matching records found"]</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@L["Loading..."]</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>
@code {

    public string? Title { get; private set; }
    private HashSet<MessageTemplateDto> selectedItems = new HashSet<MessageTemplateDto>();
    private MudTable<MessageTemplateDto> table = default!;
    private int totalItems;
    private string searchString = string.Empty;
    private bool loading;
    private bool uploading;
    private bool downloading;

    [Inject]
    private ISender mediator { get; set; } = default!;

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = default!;

    private MessageTemplatesWithPaginationQuery query { get; set; } = new MessageTemplatesWithPaginationQuery();

    private bool canSearch;
    private bool canCreate;
    private bool canEdit;
    private bool canDelete;
    private bool canImport;
    private bool canExport;
    protected override async Task OnInitializedAsync()
    {
        Title = L["message templates"];
        AuthenticationState state = await AuthState;
        canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.MessageTemplates.Create)).Succeeded;
        canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.MessageTemplates.Search)).Succeeded;
        canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.MessageTemplates.Edit)).Succeeded;
        canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.MessageTemplates.Delete)).Succeeded;
        canImport = false;
        canExport = false;
    }

    private async Task<TableData<MessageTemplateDto>> ServerReload(TableState state)
    {
        try
        {
            loading = true;
            query.Keyword = searchString;
            query.OrderBy = string.IsNullOrEmpty(state.SortLabel) ? "Id" : state.SortLabel;
            query.SortDirection = (state.SortDirection == SortDirection.None ? SortDirection.Descending.ToString() : state.SortDirection.ToString());
            query.PageNumber = state.Page + 1;
            query.PageSize = state.PageSize;
            PaginatedData<MessageTemplateDto> result = await mediator.Send(query);
            return new TableData<MessageTemplateDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OnSearch(string text)
    {
        selectedItems = new();
        searchString = text;
        await table.ReloadServerData();
    }

    private async Task OnRefresh()
    {
        selectedItems = new();
        searchString = string.Empty;
        await table.ReloadServerData();
    }

    private async Task OnCreate()
    {
        AddEditMessageTemplateCommand command = new AddEditMessageTemplateCommand();
        DialogParameters parameters = new DialogParameters
            {
                  { nameof(_MessageTemplateFormDialog.model),command },
            };

        DialogOptions options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        IDialogReference dialog = DialogService.Show<_MessageTemplateFormDialog>(L["Create a new tempalte"], parameters, options);
        DialogResult state = await dialog.Result;
        if (!state.Cancelled)
        {
            Result<int> result = await mediator.Send(command);
            await table.ReloadServerData();
            Snackbar.Add($"{L["Create successfully"]}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnEdit(MessageTemplateDto dto)
    {
        AddEditMessageTemplateCommand command = new AddEditMessageTemplateCommand()
            {
                Id = dto.Id,
                SiteId = dto.SiteId,
                Subject = dto.Subject,
                Description = dto.Description,
                SiteName = dto.SiteName,
                Body = dto.Body,
                MessageType = dto.MessageType,
                ForStatus = dto.ForStatus,
            };

        DialogParameters parameters = new DialogParameters
                {
                      { nameof(_MessageTemplateFormDialog.model),command },
                };

        DialogOptions options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        IDialogReference dialog = DialogService.Show<_MessageTemplateFormDialog>(L["Edit the template"], parameters, options);
        DialogResult state = await dialog.Result;
        if (!state.Cancelled)
        {
            Result<int> result = await mediator.Send(command);
            await table.ReloadServerData();
            Snackbar.Add($"{L["Save successfully"]}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnDelete(MessageTemplateDto dto)
    {
        LocalizedString deleteContent = L["You're sure you want to delete the site:{0}?"];
        DialogParameters parameters = new DialogParameters
                    {
                         { nameof(DeleteConfirmation.ContentText), string.Format(deleteContent, dto.SiteName) }
                    };

        DialogOptions options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            DisableBackdropClick = true
        };

        IDialogReference dialog = DialogService.Show<DeleteConfirmation>(L["Delete"], parameters, options);
        DialogResult state = await dialog.Result;
        if (!state.Cancelled)
        {
            DeleteMessageTemplateCommand command = new DeleteMessageTemplateCommand(new int[] { dto.Id });
            Result result = await mediator.Send(command);
            await table.ReloadServerData();
            Snackbar.Add($"{L["Deleted successfully"]}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnDeleteChecked()
    {
        LocalizedString deleteContent = L["You're sure you want to delete the selected items:{0}?"];
        DialogParameters parameters = new DialogParameters
                        {
                            { nameof(DeleteConfirmation.ContentText), string.Format(deleteContent,selectedItems.Count) }
                        };

        DialogOptions options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            DisableBackdropClick = true
        };

        IDialogReference dialog = DialogService.Show<DeleteConfirmation>(L["Delete"], parameters, options);
        DialogResult state = await dialog.Result;
        if (!state.Cancelled)
        {
            DeleteMessageTemplateCommand command = new DeleteMessageTemplateCommand(selectedItems.Select(x => x.Id).ToArray());
            Result result = await mediator.Send(command);
            await table.ReloadServerData();
            Snackbar.Add($"{L["Deleted successfully"]}", MudBlazor.Severity.Info);
            selectedItems = new HashSet<MessageTemplateDto>();
        }
    }
}
